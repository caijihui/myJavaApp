spring:
  datasource:
    # JDBC配置
    url: jdbc:mysql://localhost:3306/my?characterEncoding=utf-8
    username: root
    password:
    # 连接池配置
    druid:
      # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时，默认0
      initial-size: 3
      # 最大连接池数量，默认8
      max-active: 5
      # 最小连接池数量
      min-idle: 1
      # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降
      # 如果需要可以通过配置useUnfairLock属性为true使用非公平锁
      max-wait: 30000
      # 是否缓存preparedStatement，也就是PSCache
      # PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。默认false
      pool-prepared-statements: true
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true
      # 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100，默认-1
      max-pool-prepared-statement-per-connection-size: 100
      # 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'
      # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用
      validation-query: SELECT 1
      # 单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
      validation-query-timeout: 30000
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能，默认true
      test-on-borrow: true
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能，默认false
      test-on-return: true
      # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
      # 建议配置为true，不影响性能，并且保证安全性，默认false
      test-while-idle: true
      # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作，默认false
      keep-alive: true
      # 有两个含义：
      # 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接
      # 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
      # 默认1分钟
      time-between-eviction-runs-millis: 60000
      # 连接保持空闲而不被驱逐的最小时间
      min-evictable-idle-time-millis: 300000